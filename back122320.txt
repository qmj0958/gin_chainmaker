package main

import (
	"encoding/json"
	"fmt"
	"gin_chainmaker/chainmaker/chain"
	"gin_chainmaker/chainmaker/contract"
	"log"
	"net/http"

	"chainmaker.org/chainmaker/sdk-go/v2/examples"

	"github.com/gin-gonic/gin"

	"chainmaker.org/chainmaker/pb-go/v2/common"
)

const (
	createContractTimeout = 5
	//claimContractName     = "claim002" //合约名称
	claimContractName = "saleStock001" //合约名称
	//claimVersion      = "2.0.0"
	claimVersion = "1.0"
	//claimByteCodePath     = "./chainmaker_config/claim-wasm-demo/rust-fact-2.0.0.wasm"

	sdkConfigOrg1Client1Path = "./chainmaker_config/sdk_configs/sdk_config_org1_client1.yml"
)

var Resp *common.TxResponse

// 定义一个合约查询的参数
var queryParameter string

// 定义合约查询的结果
var queryResult *common.TxResponse

// 定义一个字符串string转map的函数,用作gin框架gin.H的map类型参数
func JsonstringToMap(str string) map[string]interface{} {
	var tempMap = make(map[string]interface{})
	err := json.Unmarshal([]byte(str), &tempMap)
	if err != nil {
		panic(err)

	}
	return tempMap
}
func main() {

	//创建一个服务
	r := gin.Default()

	//检查这条长安链是否运行正常
	r.GET("/contact/testChainClient", func(context *gin.Context) {
		result := chain.TestChainClientCheckNewBlockChainConfig()
		context.JSON(http.StatusOK, gin.H{
			"result": result,
		})
	})
	//查询合约
	r.GET("/contact/:_queryParameter", func(context *gin.Context) {
		//testUserContractClaim()
		queryParameter = context.Param("_queryParameter")
		queryResult = contract.ContractGet(queryParameter)
		fmt.Printf("QUERY queryResult resp: %+v\n", queryResult)
		fmt.Printf("QUERY queryResult.ContractResult resp: %+v\n", queryResult.ContractResult)
		//定义一个合约条目的结构体类型
		//type ContractItems struct {
		//	File_hash string `json:"file_hash"`
		//	File_name string `json:"file_name"`
		//	Time      int64  `json:"time"`
		//}
		//*********以下作废
		//定义一个合约变量
		//var aaaa ContractItems
		//json.Unmarshal(queryResult.ContractResult.Result, &aaaa)
		//fmt.Printf("QUERY claim contract resp: %v\n", aaaa)
		//fmt.Println("---------")
		//context.JSON(http.StatusOK, aaaa)
		//把原来的字符串前后的"{}"去掉,然后再在尾部加一个","
		//*********以上作废
		//取出查询结果的对象的result属性
		getContractResultByte := queryResult.ContractResult.Result
		//把字节数组转为为字符串
		getContractResultString := string(getContractResultByte)
		//定义一个Map，以便gin框架输出json数据结构
		var getContractResultMap = make(map[string]interface{})
		getContractResultMap = JsonstringToMap(getContractResultString)
		context.JSON(http.StatusOK, getContractResultMap)
	})
	//前端给后端传递json
	r.POST("/json", func(context *gin.Context) {
		//request.body
		//[]byte
		data, _ := context.GetRawData()
		var m map[string]interface{}
		//包装为json数据[]byte
		_ = json.Unmarshal(data, &m)
		fmt.Println(m)
		//***下面代码为执行合约
		file_hash := m["file_hash"].(string)
		file_name := m["file_name"].(string)
		time := m["time"].(string)
		client, err := examples.CreateChainClientWithSDKConf(sdkConfigOrg1Client1Path)
		if err != nil {
			log.Fatalln(err)
		}
		contract.ContractInvoke(client, "save", true, file_hash, file_name, time)
		//***上面代码为执行合约
		context.JSON(http.StatusOK, m)
	})
	//--------------------下面是示例---------------------------
	r.GET("/hello", func(ctx *gin.Context) {
		ctx.HTML(http.StatusOK, "index.html", gin.H{
			"msg": "这个是vscode_go后台传递来的数据",
		})
	})
	//接受前端传递过来的参数,传统方式
	// url?userid=xxx&username=xxx
	r.GET("/user/info", func(context *gin.Context) {
		userid := context.Query("userid")
		username := context.Query("username")
		context.JSON(http.StatusOK, gin.H{
			"userid":   userid,
			"username": username,
		})
	})
	//restful
	r.GET("/user/info/:userid/:username", func(context *gin.Context) {
		userid := context.Param("userid")
		username := context.Param("username")
		context.JSON(http.StatusOK, gin.H{
			"userid":   userid,
			"username": username,
		})
	})

	//前端表单提交
	r.POST("/user/add", func(context *gin.Context) {
		file_hash := context.PostForm("file_hash")
		file_name := context.PostForm("file_name")
		time := context.PostForm("time")
		client, err := examples.CreateChainClientWithSDKConf(sdkConfigOrg1Client1Path)
		if err != nil {
			log.Fatalln(err)
		}
		contract.ContractInvoke(client, "save", true, file_hash, file_name, time)
		context.JSON(http.StatusOK, gin.H{
			"file_hash": file_hash,
			"file_name": file_name,
			"time":      time,
		})
	})
	//路由
	r.GET("test", func(context *gin.Context) {
		//重定向
		context.Redirect(301, "http://www.baidu.com")
	})
	//
	fmt.Printf("QUERY claim contract resp: %+v\n", Resp)
	err := r.Run() // 监听并在8080上启动服务
	if err != nil {
		// log.Fatalln(err)
	}

}
